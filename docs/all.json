{"shell":true,"revision":"fe901cd5c7fffde9d1def86bdf39c3ee66a54818","objects":[{"type":null,"source":"lib/provider.ex:2","object_type":"ModuleObject","moduledoc":"This module provides an implementation of Distilery's configuration provider\nbehavior that changes runtime config tuples for the value.\n\n## Usage\nAdd the following to your `rel/config.exs`\n\n  release :myapp do\n    # ...snip...\n    set config_providers: [\n      ConfigTuples.Provider\n    ]\n  end\n\nThis will result in `ConfigTuples.Provider` being invoked during boot, at which point it\nwill evaluate the current configuration for all the apps and replace the config tuples when needed, persisting it in the configuration.\n\n## Config tuples\n\nThe existing config tuples are:\n\n- `{:system, env_name}` - Read the env_name from environment variables (Using `System.get_env/1`)\n- `{:system, env_name, default}` - The same as `{:system, env_name}` but with a default value if no environment variable is set.\n- `{:integer, value}` - Parse the value as integer. Value can be other config tuple.\n- `{:atom, value}` - Parse the value as atom. Value can be other config tuple.\n- `{:boolean, value}` - Parse the value as boolean. Value can be other config tuple.\n\nWith `:integer`, `:atom` and `:boolean` you can use another config tuples, for example: `{:integer, {:system, \"MYSQL_PORT\"}}`\n","module":"Elixir.ConfigTuples.Provider","id":"ConfigTuples.Provider"},{"type":"def","source":"lib/provider.ex:35","signature":[["cfg",[],"Elixir"]],"object_type":"FunctionObject","name":"init","module_id":"ConfigTuples.Provider","id":"init/1","doc":false,"arity":1}],"language":"elixir","git_repo_url":"https://github.com/rockneurotiko/config_tuples.git","client_version":"1.0.0","client_name":"inch_ex","branch_name":"master","args":[]}